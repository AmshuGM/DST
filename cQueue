// Circular Queue implementation in C

#include <stdio.h>
#include<stdlib.h>

#define SIZE 5

int items[SIZE];
int front = -1, rear = -1;


int isFull() {
  if ((front == rear + 1) || (front == 0 && rear == SIZE - 1)) return 1;
  return 0;
}


int isEmpty() {
  if (front == -1) return 1;
  return 0;
}


void enQueue(int element) {
  if (isFull())
    printf("\n Queue is full!! \n");
  else {
    if (front == -1) front = 0;
    rear = (rear + 1) % SIZE;
    items[rear] = element;
   
  }
}


int deQueue() {
  int element;
  if (isEmpty()) {
    printf("\n Queue is empty !! \n");
    return (-1);
  } else {
    element = items[front];
    if (front == rear) {
      front = -1;
      rear = -1;
    } 
   
    else {
      front = (front + 1) % SIZE;
    }
    
    return (element);
  }
}


void display() {
  int i;
  if (isEmpty())
    printf(" \n Empty Queue\n");
  else {
   
    printf("\n Items -> ");
    for (i = front; i != rear; i = (i + 1) % SIZE) {
      printf("%d ", items[i]);
    }
    printf("%d ", items[i]);
}
}

int main() {
  
  int choice, input;

    while (1){
        printf ("\n1:Enqueue\n2:Dequeue\n3:Display\n4:Quit\n");
        scanf ("%d",&choice);

        switch (choice){

            case 1:printf ("Enter element to be added:\n");
            scanf ("%d", &input);
            enQueue (input);
            break;

            case 2:deQueue();
            break;

            case 3:display();
            break;

            case 4:exit (0);
            break;

            default:printf ("Enter a valid choice!\n");
            break;
        }}
  return 0;
}
