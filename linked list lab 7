// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node* next;
    
};


struct node * create(){
    struct node* newnode=NULL;
    return newnode=(struct node *)malloc(sizeof(struct node*));
}

void beginsert(struct node** head){
    
    struct node* temp=*head;
    struct node * newnode=create();
    printf("enter data: ");
    scanf("%d",&(newnode->data));
    *head=newnode;
    newnode->next=temp;
    printf("\n");
    
   
}

void sort(struct node ** head){
    int swapped, i; 
    struct node *ptr1; 
    struct node *lptr = NULL; 
  
    /* Checking for empty list */
    if (*head == NULL) 
        return; 
  
    do
    { 
        swapped = 0; 
        ptr1 = *head; 
  
        while (ptr1->next != lptr) 
        { 
            if (ptr1->data > ptr1->next->data) 
            { 
                swap(ptr1, ptr1->next); 
                swapped = 1; 
            } 
            ptr1 = ptr1->next; 
        } 
        lptr = ptr1; 
    } 
    while (swapped); 
} 
  
/* function to swap data of two nodes a and b*/
void swap(struct node *a, struct node *b) 
{ 
    int temp = a->data; 
    a->data = b->data; 
    b->data = temp; 
} 


void middleinsert(struct node** head,int i){
    
    struct node* temp=*head;
    int choice;
    if(*head==NULL){
    printf("linked list is empty\nDo you want to create a linked list?(1:yes,0:no):");
    scanf("%d",&choice);
    printf("\n");
    }
    else{
    printf("enter the position :");scanf("%d",&i);
    if(choice==0)printf("cannot add at 0\n");
    else if(choice==1){
       beginsert(head);
        
    }
    
   else if(i==1){printf("inserting at the beginning...\n");beginsert(head);}
    else{
    i-=2;
    while(i-- && temp->next!=NULL){                                //for values greater than the length of linked list
        temp=temp->next;
        
    }
    struct node *hold=temp->next;
    temp->next=create();
     temp=temp->next;
    printf("enter data: ");
    scanf("%d",&(temp->data));
   
    temp->next=hold;
    
    }}
    
}

void endinsert(struct node ** head){
    
    struct node* temp=*head;
    if(temp==NULL){printf("liked list is empty so element will be added at the beginning\n");
        beginsert(head);
    }
    else{
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=create();
    temp=temp->next;
    temp->next=NULL;
    printf("enter data: ");
    scanf("%d",&(temp->data));
    
}
}
void display(struct node * temp){
    printf("Linked list : ");
    printf("%d ",(temp->data));
    temp=temp->next;
    
while(temp!=NULL){
    printf(" -> %d ",(temp->data));
    temp=temp->next;
}
}
void merge(){
     struct node * head1=NULL;
      struct node * head2=NULL;
    int c;
   // int i;
    
    printf("enter the data to linked list 1 for merging\n");
int i=1;
    while(i){
    printf("SUB MENU\n-----------------\n1)INSERT DATA2)EXIT\n\n");
    scanf("%d",&c);
    switch(c){
        case 1:endinsert(&head1);
                break;
        case 2:i=0;break;
    
}}
printf("enter the data to linked list 2 for merging\n");
 i=1;
    while(i){
    printf("SUB MENU\n-----------------\n1)INSERT DATA2)EXIT\n\n");
    scanf("%d",&c);
    switch(c){
        case 1:endinsert(&head2);
                break;
        case 2:i=0;break;
    
}}
struct node ** ptr=&head1;
while((*ptr)->next!=NULL){
    *ptr=(*ptr)->next;
}
(*ptr)->next=head2;
display(head1);

}
void reverse(struct node** head_ref)
{
    struct node* prev = NULL;
    struct node* current = *head_ref;
    struct node* next = NULL;
    while (current != NULL) {
        
        next = current->next;
 
        
        current->next = prev;
 
       
        prev = current;
        current = next;
    }
    *head_ref = prev;
}





int main() {
    struct node * head=NULL;
    int c;
    int i;
    while(1){
    printf("\n\nMAIN MENU\n-----------------\n1)INSERT AT BEGINNING\n2)INSERT AT THE MIDDLE\n3)INSERT AT THE END\n4)DISPLAY\n5)SORT\n6)EXIT\n\n");
    scanf("%d",&c);
    switch(c){
        case 1:beginsert(&head);
                break;
        case 2:middleinsert(&head,i);break;
        case 3:endinsert(&head);break;
        case 4:display(head);printf("\n");
        break;
        case 5:sort(&head);break;
        case 6:exit(0);
        case 7:merge();break;
        case 8:reverse(&head);break;
        

    }}
    return 0;
}
